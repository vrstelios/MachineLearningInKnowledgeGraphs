# -*- coding: utf-8 -*-
"""mOWL4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10EJ4GoZ9dNtHalUB-xDI2e6jAkTn3aXH
"""

from google.colab import drive
# 1. Σύνδεση με το Google Drive
drive.mount('/content/drive')

# 2. Εγκατάσταση πακέτων
!pip uninstall -y numpy mowl gensim class-resolver
!pip cache purge
!apt-get remove --purge -y openjdk-11-jdk-headless

!apt-get install openjdk-11-jdk-headless -qq > /dev/null
#!pip install --upgrade class-resolver==0.4.0 mowl-borg gensim==4.3.0
#!pip install --upgrade numpy
#!pip install numpy==1.23.5

!pip install numpy==1.23.5
!pip install gensim==4.3.0
!pip install class-resolver==0.4.0
!pip install mowl-borg==0.0.6  # ή όποια είναι συμβατή με τα παραπάνω


!pip freeze
!pip check
import mowl
# 3. Αρχικοποίηση JVM
mowl.init_jvm("20g")

from mowl.datasets import PathDataset
from mowl.models import SyntacticPlusW2VModel
from gensim.models import Word2Vec, KeyedVectors
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, roc_auc_score
import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay, RocCurveDisplay

# -------------------- #
# ΔΕΔΟΜΕΝΑ & ΜΟΝΤΕΛΟ
# -------------------- #

# 4. Φόρτωση ontology
owl_path = "/content/drive/MyDrive/Homo_sapiens.owl"
dataset = PathDataset(owl_path)

# 5. Δημιουργία μοντέλου OWL2Vec*
model = SyntacticPlusW2VModel(dataset)

# 6. Ορισμός παραμέτρων Word2Vec
model.set_w2v_model(
    vector_size=100,  # Διάσταση embeddings
    window=3,         # Μέγεθος παραθύρου
    min_count=2,      # Αγνοεί classes/properties με λιγότερες από 1 εμφανίσεις
    negative=15,      # Περισσότερα negative samples
    epochs=20         # Περισσότερες επαναλήψεις
)

# 7. Δημιουργία corpus (walks) και εκπαίδευση
model.generate_corpus(save=True, with_annotations=True)
model.train(epochs=20)

# 8. Αποθήκευση μοντέλου
model.w2v_model.save("human_ontology_embeddings.w2v")

# 9. Φόρτωση embeddings
pretrained_model = SyntacticPlusW2VModel(dataset)
pretrained_model.from_pretrained("human_ontology_embeddings.w2v")

# 10. Πρόσβαση στα embeddings
class_embeddings = pretrained_model.class_embeddings
property_embeddings = pretrained_model.object_property_embeddings

# ------------------------ #
# ΑΞΙΟΛΟΓΗΣΗ & ΠΡΟΒΛΕΨΕΙΣ
# ------------------------ #

# 11. Ορισμός θετικών και αρνητικών πρωτεϊνών
positive_proteins = [
    "http://www.reactome.org/biopax/48887#protein7832",
    "http://www.reactome.org/biopax/48887#protein1119",
    "http://www.reactome.org/biopax/48887#protein4268",
    "http://www.reactome.org/biopax/48887#protein8614",
    "http://www.reactome.org/biopax/48887#protein3070",
    "http://www.reactome.org/biopax/48887#protein7807",
    "http://www.reactome.org/biopax/48887#protein7872",
    "http://www.reactome.org/biopax/48887#protein199",
    "http://www.reactome.org/biopax/48887#protein3601",
    "http://www.reactome.org/biopax/48887#protein2147",
    "http://www.reactome.org/biopax/48887#protein227",
    "http://www.reactome.org/biopax/48887#protein323",
    "http://www.reactome.org/biopax/48887#protein18",
    "http://www.reactome.org/biopax/48887#protein4464",
    "http://www.reactome.org/biopax/48887#protein8889",
    "http://www.reactome.org/biopax/48887#protein1400",
    "http://www.reactome.org/biopax/48887#protein8665",
    "http://www.reactome.org/biopax/48887#protein1876",
    "http://www.reactome.org/biopax/48887#protein2631",
    "http://www.reactome.org/biopax/48887#protein1217",
    "http://www.reactome.org/biopax/48887#protein8852",
    "http://www.reactome.org/biopax/48887#protein2812",
    "http://www.reactome.org/biopax/48887#protein863",
    "http://www.reactome.org/biopax/48887#protein1911",
    "http://www.reactome.org/biopax/48887#protein1910",
    "http://www.reactome.org/biopax/48887#protein7748",
    "http://www.reactome.org/biopax/48887#protein1205",
    "http://www.reactome.org/biopax/48887#protein5401",
    "http://www.reactome.org/biopax/48887#protein9252",
    "http://www.reactome.org/biopax/48887#protein225",
    "http://www.reactome.org/biopax/48887#protein7335",
    "http://www.reactome.org/biopax/48887#protein1607",
    "http://www.reactome.org/biopax/48887#protein1350",
    "http://www.reactome.org/biopax/48887#protein339",
    "http://www.reactome.org/biopax/48887#protein875",
    "http://www.reactome.org/biopax/48887#protein63",
    "http://www.reactome.org/biopax/48887#protein5659",
    "http://www.reactome.org/biopax/48887#protein9016",
    "http://www.reactome.org/biopax/48887#protein4603",
    "http://www.reactome.org/biopax/48887#protein866",
    "http://www.reactome.org/biopax/48887#protein2699",
    "http://www.reactome.org/biopax/48887#protein5490",
    "http://www.reactome.org/biopax/48887#protein3602",
    "http://www.reactome.org/biopax/48887#protein3864",
    "http://www.reactome.org/biopax/48887#protein317",
    "http://www.reactome.org/biopax/48887#protein58",
    "http://www.reactome.org/biopax/48887#protein5019",
    "http://www.reactome.org/biopax/48887#protein59",
    "http://www.reactome.org/biopax/48887#protein746",
    "http://www.reactome.org/biopax/48887#protein7957"
]

negative_proteins = [
    "http://www.reactome.org/biopax/48887#protein484",
    "http://www.reactome.org/biopax/48887#protein8427",
    "http://www.reactome.org/biopax/48887#protein1528",
    "http://www.reactome.org/biopax/48887#protein5958",
    "http://www.reactome.org/biopax/48887#protein4021",
    "http://www.reactome.org/biopax/48887#protein5406",
    "http://www.reactome.org/biopax/48887#protein1056",
    "http://www.reactome.org/biopax/48887#protein4458",
    "http://www.reactome.org/biopax/48887#protein8749",
    "http://www.reactome.org/biopax/48887#protein5269",
    "http://www.reactome.org/biopax/48887#protein1967",
    "http://www.reactome.org/biopax/48887#protein8827",
    "http://www.reactome.org/biopax/48887#protein8708",
    "http://www.reactome.org/biopax/48887#protein8982",
    "http://www.reactome.org/biopax/48887#protein5459",
    "http://www.reactome.org/biopax/48887#protein5981",
    "http://www.reactome.org/biopax/48887#protein5163",
    "http://www.reactome.org/biopax/48887#protein6384",
    "http://www.reactome.org/biopax/48887#protein5701",
    "http://www.reactome.org/biopax/48887#protein563",
    "http://www.reactome.org/biopax/48887#protein6195",
    "http://www.reactome.org/biopax/48887#protein3820",
    "http://www.reactome.org/biopax/48887#protein5938",
    "http://www.reactome.org/biopax/48887#protein852",
    "http://www.reactome.org/biopax/48887#protein5633",
    "http://www.reactome.org/biopax/48887#protein4872",
    "http://www.reactome.org/biopax/48887#protein7366",
    "http://www.reactome.org/biopax/48887#protein3266",
    "http://www.reactome.org/biopax/48887#protein1551",
    "http://www.reactome.org/biopax/48887#protein8388",
    "http://www.reactome.org/biopax/48887#protein8917",
    "http://www.reactome.org/biopax/48887#protein768",
    "http://www.reactome.org/biopax/48887#protein5749",
    "http://www.reactome.org/biopax/48887#protein5770",
    "http://www.reactome.org/biopax/48887#protein3910",
    "http://www.reactome.org/biopax/48887#protein4916",
    "http://www.reactome.org/biopax/48887#protein629",
    "http://www.reactome.org/biopax/48887#protein1293",
    "http://www.reactome.org/biopax/48887#protein2405",
    "http://www.reactome.org/biopax/48887#protein3860",
    "http://www.reactome.org/biopax/48887#protein2036",
    "http://www.reactome.org/biopax/48887#protein1279",
    "http://www.reactome.org/biopax/48887#protein1780",
    "http://www.reactome.org/biopax/48887#protein2789",
    "http://www.reactome.org/biopax/48887#protein2414",
    "http://www.reactome.org/biopax/48887#protein9173",
    "http://www.reactome.org/biopax/48887#protein4635",
    "http://www.reactome.org/biopax/48887#protein4535",
    "http://www.reactome.org/biopax/48887#protein6617",
    "http://www.reactome.org/biopax/48887#protein1220"
]

# 12. Δημιουργία labels (1 για θεραπευτικές, 0 για μη θεραπευτικές)
y_true = [1]*len(positive_proteins) + [0]*len(negative_proteins)
#print("Μήκος y_true:", len(y_true))
#print("Πλήθος θετικών (1):", y_true.count(1))
#print("Πλήθος αρνητικών (0):", y_true.count(0))

# 13. Φόρτωση μοντέλου
try:
    w2v_model = KeyedVectors.load("human_ontology_embeddings.w2v")
    print("Φορτώθηκε ως KeyedVectors")
except:
    w2v_model = Word2Vec.load("human_ontology_embeddings.w2v")
    print("Φορτώθηκε ως Word2Vec - μετατροπή σε KeyedVectors")
    wv = w2v_model.wv

# 14. Έλεγχος διαθέσιμων μεθόδων
if hasattr(w2v_model, 'key_to_index'):
    vocab = w2v_model.key_to_index
elif hasattr(w2v_model, 'wv'):
    vocab = w2v_model.wv.key_to_index
    wv = w2v_model.wv
else:
    raise ValueError("Δεν αναγνωρίζεται η μορφή του μοντέλου")

print(f"Συνολικές πρωτεΐνες στα embeddings: {len(vocab)}")
#print("Παράδειγμα πρωτεϊνών:", list(vocab.keys())[:5])

# 15. Υπολογισμός ομοιοτήτων
def get_similarity(model, protein1, protein2):
    if hasattr(model, 'similarity'):  # KeyedVectors
        return model.similarity(protein1, protein2)
    elif hasattr(model, 'wv'):  # Word2Vec
        return model.wv.similarity(protein1, protein2)
    else:
        raise ValueError("Μη υποστηριζόμενη μορφή μοντέλου")

def intra_group_similarity(proteins):
    similarities = []
    for i in range(len(proteins)):
        for j in range(i+1, len(proteins)):
            if proteins[i] in vocab and proteins[j] in vocab:
                similarities.append(get_similarity(w2v_model, proteins[i], proteins[j]))
    return np.mean(similarities) if similarities else 0

pos_sim = intra_group_similarity(positive_proteins)
neg_sim = intra_group_similarity(negative_proteins)

cross_similarities = []
for p in positive_proteins:
    for n in negative_proteins:
        if p in vocab and n in vocab:
            cross_similarities.append(get_similarity(w2v_model, p, n))
cross_sim = np.mean(cross_similarities) if cross_similarities else 0

print("\nΑποτελέσματα:")
print(f"Μέση ομοιότητα θετικών ζευγών: {pos_sim:.3f}")
print(f"Μέση ομοιότητα αρνητικών ζευγών: {neg_sim:.3f}")
print(f"Μέση διαομαδική ομοιότητα: {cross_sim:.3f}")


# 16. Πρόσβαση στα διανύσματα
if hasattr(w2v_model, 'wv'):
    vectors = w2v_model.wv
else:
    vectors = w2v_model

X = []
y = []

# 17. Προσθήκη θετικών παραδειγμάτων
for protein in positive_proteins:
    if protein in vectors.key_to_index:
        X.append(vectors[protein])
        y.append(1)

# 18. Προσθήκη αρνητικών παραδειγμάτων
for protein in negative_proteins:
    if protein in vectors.key_to_index:
        X.append(vectors[protein])
        y.append(0)


X = np.array(X)
y = np.array(y)
print(f"Σχήμα πίνακα χαρακτηριστικών: {X.shape}")
print(f"Κλάσεις: {np.unique(y, return_counts=True)}")

# 19. Διαχωρισμός σε train/test (70%-30%)
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42, stratify=y
)

# 20. Εκπαίδευση μοντέλου
clf = RandomForestClassifier(
    n_estimators=200,
    max_depth=3,
    random_state=42,
    class_weight='balanced'
)
clf.fit(X_train, y_train)

# 21. Αξιολόγηση
y_pred = clf.predict(X_test)
y_proba = clf.predict_proba(X_test)[:, 1]

print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=["Negative", "Positive"]))

print(f"\nAUC-ROC: {roc_auc_score(y_test, y_proba):.3f}")

# 22. Οπτικοποιήσεις
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

# 23. Confusion Matrix
ConfusionMatrixDisplay.from_predictions(
    y_test, y_pred,
    display_labels=["Negative", "Positive"],
    ax=ax1,
    cmap='Blues'
)
ax1.set_title("Confusion Matrix")

RocCurveDisplay.from_predictions(y_test, y_proba, ax=ax2)
ax2.plot([0, 1], [0, 1], linestyle="--", color="gray")
ax2.set_title("ROC Curve")

plt.tight_layout()
plt.show()

import numpy as np
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
from mowl.datasets import PathDataset

# 1. Φόρτωση των embeddings από το pretrained μοντέλο
class_embeddings = pretrained_model.class_embeddings
property_embeddings = pretrained_model.object_property_embeddings

# 2. Επιλογή 10 τυχαίων κλάσεων για οπτικοποίηση
selected_classes = list(class_embeddings.keys())[:10]
selected_embeddings = np.array([class_embeddings[cls] for cls in selected_classes])

# 3. Εφαρμογή PCA για μείωση σε 2D
pca = PCA(n_components=2)
reduced_embeddings = pca.fit_transform(selected_embeddings)

# 4. Δημιουργία γραφήματος
plt.figure(figsize=(12, 8))
plt.scatter(reduced_embeddings[:, 0], reduced_embeddings[:, 1], color='blue', alpha=0.7)

# 5. Προσθήκη labels (μόνο το localname της κλάσης, όχι ολόκληρο το IRI)
for i, cls in enumerate(selected_classes):
    label = cls.split("/")[-1]
    plt.text(reduced_embeddings[i, 0], reduced_embeddings[i, 1], label, fontsize=9)

plt.title("2D Projection of Class Embeddings (PCA)", fontsize=14)
plt.xlabel("PCA Component 1", fontsize=12)
plt.ylabel("PCA Component 2", fontsize=12)
plt.grid(alpha=0.2)
plt.show()